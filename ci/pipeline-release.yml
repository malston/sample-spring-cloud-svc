---
resources:
- name: repo-develop
  type: git
  source:
    uri: ((app-url))
    branch: develop
    private_key: ((github-private-key))
    ignore_paths:
      - ci

- name: repo-release
  type: git
  source:
    uri: ((app-url))
    branch: release
    private_key: ((github-private-key))
    ignore_paths:
      - ci

- name: version
  type: semver
  source:
    uri: ((app-url))
    branch: version
    private_key: ((github-private-key))
    file: version
    driver: git
    initial_version: 1.0.0

# - name: version
#   type: git
#   source:
#     uri: ((app-url))
#     branch: version
#     private_key: ((github-private-key))

- name: tools
  type: git
  source:
    uri: ((tools-scripts-url))
    branch: ((tools-branch))

- name: m2
  type: docker-image
  source:
    repository: springcloud/spring-pipeline-m2

jobs:
- name: create-release
  serial: true
  public: false
  plan:
  - aggregate:
    - get: tools
    - get: from-repo
      resource: repo-develop
    - get: to-repo
      resource: repo-release
  # - task: create-release-branch
  #   file: repo/ci/tasks/create-branch/task.yml
  #   params:
  #     GIT_EMAIL: ((git-email))
  #     GIT_NAME: ((git-name))
  #     BRANCH_NAME: release
  # - put: repo
  #   resource: repo-release
  #   params:
  #     repository: out
  - task: merge-develop-to-release
    file: to-repo/ci/tasks/merge-branch/task.yml
    params:
      GIT_EMAIL: ((git-email))
      GIT_NAME: ((git-name))
      TARGET_BRANCH_NAME: develop
  - put: to-repo
    resource: repo-release
    params:
      repository: out

- name: build-and-upload
  serial: true
  public: false
  plan:
  - aggregate:
    - get: tools
    - get: repo
      resource: repo-release
      trigger: true
    - get: m2
    - get: version
      params: {pre: rc}
  - task: build-and-upload
    file: tools/tasks/build-and-upload/task.yml
    params:
      M2_REPO: ((maven-local-dir))
      <<: *common-params

- name: stage-deploy
  serial: true
  public: false
  plan:
  - aggregate:
    - get: tools
    - get: repo
      resource: repo-release
      passed:
      - build-and-upload
      trigger: true
    - get: m2
    - get: version
  - task: stage-deploy
    file: tools/tasks/stage-deploy/task.yml
    params:
      <<: *common-params
      <<: *paas-stage-params
      PAAS_HOSTNAME_UUID: ((paas-hostname-uuid))

- name: stage-e2e
  serial: true
  public: false
  plan:
  - aggregate:
    - get: tools
    - get: repo
      resource: repo-release
      passed:
      - stage-deploy
      trigger: true
    - get: m2
    - get: version
  - task: stage-e2e
    file: tools/tasks/stage-e2e/task.yml
    params:
      <<: *common-params
      <<: *paas-stage-params

common-params: &common-params
  _JAVA_OPTIONS: -Djava.security.egd=file:/dev/./urandom
  APP_MEMORY_LIMIT: ((app-memory-limit))
  BUILD_OPTIONS: ((build-options))
  GIT_EMAIL: ((git-email))
  GIT_NAME: ((git-name))
  M2_REPO: ((maven-local-dir))
  M2_SETTINGS_REPO_ID: ((m2-settings-repo-id))
  M2_SETTINGS_REPO_PASSWORD: ((m2-settings-repo-password))
  M2_SETTINGS_REPO_USERNAME: ((m2-settings-repo-username))
  PAAS_TYPE: ((paas-type))
  REPO_WITH_BINARIES: ((repo-with-binaries))
  REPO_WITH_SNAPSHOT_BINARIES: ((repo-with-snaphost-binaries))

paas-prod-params: &paas-prod-params
  PAAS_PROD_API_URL: ((paas-prod-api-url))
  PAAS_PROD_ORG: ((paas-prod-org))
  PAAS_PROD_PASSWORD: ((paas-prod-password))
  PAAS_PROD_SPACE: ((paas-prod-space))
  PAAS_PROD_USERNAME: ((paas-prod-username))

paas-stage-params: &paas-stage-params
  PAAS_STAGE_API_URL: ((paas-stage-api-url))
  PAAS_STAGE_ORG: ((paas-stage-org))
  PAAS_STAGE_PASSWORD: ((paas-stage-password))
  PAAS_STAGE_SPACE: ((paas-stage-space))
  PAAS_STAGE_USERNAME: ((paas-stage-username))

paas-test-params: &paas-test-params
  PAAS_TEST_API_URL: ((paas-test-api-url))
  PAAS_TEST_ORG: ((paas-test-org))
  PAAS_TEST_PASSWORD: ((paas-test-password))
  PAAS_TEST_SPACE: ((paas-test-space))
  PAAS_TEST_USERNAME: ((paas-test-username))
